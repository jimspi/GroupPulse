// FILE: package.json
{
  "name": "group-pulse",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "next": "latest",
    "react": "latest",
    "react-dom": "latest",
    "node-fetch": "^3.3.2",
    "openai": "^4.0.0"
  }
}

// FILE: README.md
# GroupPulse

GroupPulse is a simple AI-powered check-in tool designed for mental health support groups. Users select their mood using emojis, choose a reason behind their feelings, and receive a personalized, encouraging response generated by GPT-3.5.

## 🚀 Features
- Emoji-based emotional check-in
- Tag reasons (e.g., Family, Work, Burnout)
- AI-generated empathetic message, suggestion, and affirmation
- Anonymous, therapeutic interaction

## 🧑‍💻 Getting Started

### 1. Clone the Repository
```bash
git clone https://github.com/YOUR_USERNAME/group-pulse.git
cd group-pulse
```

### 2. Install Dependencies
```bash
npm install
```

### 3. Set up Environment Variable
Create a `.env.local` file:
```bash
touch .env.local
```
Add your OpenAI key:
```
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
```

### 4. Add a Favicon
Create a `public/` folder and place a `favicon.ico` file inside (optional but recommended).

### 5. Run Locally
```bash
npm run dev
```
Visit: [http://localhost:3000](http://localhost:3000)

## 🌐 Deploy to Vercel
1. Push this repo to GitHub
2. Import it into [Vercel](https://vercel.com)
3. In project settings → Environment Variables:
   - `OPENAI_API_KEY = sk-...your-key...`
4. Click **Deploy**

Your app will be live at `https://your-project-name.vercel.app`

---

Built with ❤️ to support mental wellness.

// FILE: .env.local
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

// FILE: public/favicon.ico
(binary placeholder - place your favicon.ico file here)

// FILE: pages/index.js
import { useState } from 'react';

export default function Home() {
  const emojis = ['😄','😊','😌','😐','😶','😞','😢','😰','😫','😤','😟','🫣'];
  const reasonsList = [
    'Family','Friends','Partner','Loneliness','Job','Finances',
    'Burnout','Body Image','Health','Addiction','Safety','Overthinking'
  ];

  const [selectedEmoji, setSelectedEmoji] = useState(null);
  const [selectedReasons, setSelectedReasons] = useState([]);
  const [response, setResponse] = useState(null);
  const [error, setError] = useState(null);

  const toggleReason = (reason) => {
    setSelectedReasons(prev =>
      prev.includes(reason) ? prev.filter(r => r !== reason) : [...prev, reason]
    );
  };

  const submitCheckIn = async () => {
    setError(null);
    setResponse(null);
    if (!selectedEmoji) {
      alert("Please select a mood emoji.");
      return;
    }
    try {
      const res = await fetch('/api/gpt-checkin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ mood: selectedEmoji, reasons: selectedReasons })
      });
      if (res.status === 405) {
        // Ignore stray GET or invalid method calls
        return;
      }
      if (!res.ok) {
        setError(`API error: ${res.status}`);
        return;
      }
      const data = await res.json();
      setResponse(data);
    } catch (e) {
      console.error("Fetch error", e);
      setError("Network error");
    }
  };

  return (
    <div style={{ fontFamily: 'Arial, sans-serif', padding: '20px', maxWidth: 800, margin: 'auto' }}>
      <h1 style={{ textAlign: 'center' }}>🧠 GroupPulse Check-In</h1>

      <div style={{ marginBottom: 30 }}>
        <h3>1. How are you feeling today?</h3>
        <div style={{ display: 'flex', flexWrap: 'wrap', gap: 10 }}>
          {emojis.map(e => (
            <button key={e}
              onClick={() => setSelectedEmoji(e)}
              style={{
                fontSize: 24, padding: '10px 15px',
                background: selectedEmoji === e ? '#d0f0fd' : '#fff',
                border: '1px solid #ccc', borderRadius: 10
              }}>
              {e}
            </button>
          ))}
        </div>
      </div>

      <div style={{ marginBottom: 30 }}>
        <h3>2. What's contributing to this feeling?</h3>
        <div style={{ display: 'flex', flexWrap: 'wrap', gap: 10 }}>
          {reasonsList.map(reason => (
            <button key={reason}
              onClick={() => toggleReason(reason)}
              style={{
                padding: '8px 12px',
                fontSize: 16,
                background: selectedReasons.includes(reason) ? '#d0f0fd' : '#fff',
                border: '1px solid #ccc', borderRadius: 8
              }}>
              {reason}
            </button>
          ))}
        </div>
      </div>

      <button onClick={submitCheckIn}
        style={{
          display: 'block', margin: '0 auto', padding: '12px 20px',
          fontSize: 18, background: '#1d9bf0', color: '#fff',
          border: 'none', borderRadius: 8
        }}>
        Submit Check-In
      </button>

      {error && <p style={{ color: 'red', marginTop: 20 }}>{error}</p>}
      {response && (
        <div style={{ marginTop: 30, background: '#e3f6f5', padding: 20, borderRadius: 10 }}>
          <h3>Your AI Reflection</h3>
          <p><strong>💬 Message:</strong> {response.aiMessage}</p>
          <p><strong>🧘 Suggestion:</strong> {response.aiSuggestion}</p>
          <p><strong>💡 Affirmation:</strong> {response.aiAffirmation}</p>
        </div>
      )}
    </div>
  );
}// FILE: pages/api/gpt-checkin.js
import { Configuration, OpenAIApi } from 'openai';

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

export default async function handler(req, res) {
  // Handle GET requests with an empty JSON to prevent parsing errors
  if (req.method === 'GET') {
    return res.status(200).json({ aiMessage: '', aiSuggestion: '', aiAffirmation: '' });
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  const { mood, reasons } = req.body;

  try {
    const messages = [
      {
        role: 'system',
        content: `You are a compassionate mental health assistant. Based on the user's mood and reasons, provide 3 things:
1. A supportive message
2. A helpful suggestion
3. A positive affirmation.
Keep each response under 2 sentences.`
      },
      {
        role: 'user',
        content: `Mood: ${mood}\nReasons: ${reasons.join(', ')}`
      }
    ];

    const completion = await openai.createChatCompletion({
      model: 'gpt-3.5-turbo',
      messages,
    });

    const reply = completion.data.choices[0].message.content;
    const [aiMessage, aiSuggestion, aiAffirmation] = reply.split(/\r?\n/).filter(Boolean);

    res.status(200).json({ aiMessage, aiSuggestion, aiAffirmation });
  } catch (error) {
    console.error('OpenAI error:', error);
    res.status(500).json({ error: 'Failed to generate response.' });
  }
}

